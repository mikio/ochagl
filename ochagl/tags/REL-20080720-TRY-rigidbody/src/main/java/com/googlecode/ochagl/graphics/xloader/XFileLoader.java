package com.googlecode.ochagl.graphics.xloader;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.logging.Level;import java.util.logging.Logger;public class XFileLoader {    private static final Logger logger = Logger.getLogger(XFileLoader.class.getName());    /** 字句解析器。 */    private Lexer lexer_ = null;    /** 先読みしたトークン。 */    private int tokenType_ = ScriptTokenType.EOS;    public XFileLoader() {        lexer_ = new Lexer();        logger.log(Level.INFO, "hoge");    }    public void load(String filename) {        InputStream is = getClass().getClassLoader().getResourceAsStream(filename);        InputStreamReader isr = new InputStreamReader(is);        BufferedReader reader = new BufferedReader(isr);        lexer_.setReader(reader);        try {            parse();        } finally {            try {                reader.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    /**     * 構文解析する。     */    public void parse() {        try {            advanceToken();            while (tokenType_ != ScriptTokenType.EOS) {                stmt();            }        } catch (ScriptException e) {            System.out.printf("%d行%d列目, %s", lexer_.getRow(), lexer_.getCol(), e.getMessage());        }    }    /**     * 文を解析する。     *      * @return 構文ツリー     */    private void stmt() {        switch (tokenType_) {            case ScriptTokenType.KEYWORD:                if (lexer_.getValue().equals("Frame")) {                    frame();                } else if (lexer_.getValue().equals("Mesh")) {                    mesh();                }                break;            default:                advanceToken();        }    }    /**     * トークンを取り出す。     */    private void advanceToken() {        if (lexer_.advance()) {            tokenType_ = lexer_.getTokenType();            if (tokenType_ == ScriptTokenType.FLOAT) {                System.out.printf("advanced...float :%f\n", lexer_.getFloat());            } else if (tokenType_ == ScriptTokenType.INT) {                System.out.printf("advanced... int  :%d\n", lexer_.getInt());            } else if (tokenType_ == ScriptTokenType.STRING) {                System.out.printf("advanced...string :%s\n", lexer_.getValue());            } else if (tokenType_ == ScriptTokenType.SYMBOL) {                System.out.printf("advanced...symbol :%s\n", lexer_.getValue());            } else if (tokenType_ == ScriptTokenType.KEYWORD) {                System.out.printf("advanced...keyword:%s\n", lexer_.getValue());            } else {                System.out.printf("advanced...char   :%c\n", lexer_.getTokenType());            }        } else {            tokenType_ = ScriptTokenType.EOS;        }    }    /**     * Frameを解析する。     */    private void frame() {        System.out.printf("frame start... :%s\n", lexer_.getValue());        advanceToken(); // get frameName        advanceToken(); // get {        if (lexer_.getTokenType() != '{') {            throw new ScriptException("文法エラーです。");        }        stmt();        advanceToken(); // skip }    }    /**     * Meshを解析する。     *      * @return 構文ツリー     */    private void mesh() {        System.out.printf("mesh start... :%s\n", lexer_.getValue());        advanceToken(); // get {        advanceToken();        int vertexNum = lexer_.getInt();        advanceToken(); // get ;        int i, j;        for (i = 0; i < vertexNum; i++) {            float x, y, z;            advanceToken();            x = lexer_.getFloat();            advanceToken();                        advanceToken();            y = lexer_.getFloat();            advanceToken();            advanceToken();            z = lexer_.getFloat();            advanceToken();            advanceToken();            System.out.printf("%f,%f,%f\n", x, y, z);        }        advanceToken();        int indexNum = lexer_.getInt();        for (i = 0; i < indexNum; i++) {            advanceToken();            int vNum = lexer_.getInt();            for (j = 0; j < vNum; j++) {                advanceToken();                int index = lexer_.getInt();                System.out.printf("index%d:%d", i, index);            }        }    }    /**     * 読み込み位置（列）を返す。1オリジン。     * @return 列     */    public int getCol() {        return lexer_.getCol();    }    /**     * 読み込み位置（行）を返す。1オリジン。     * @return 行     */    public int getRow() {        return lexer_.getRow();    }    /**     * 繰り返し可能な初期化     */    public void reset() {        lexer_.reset();    }}